#Buff_assembly_Chicago 2.R
#This script is to investigate how 867 unbroken contigs join together
#with 194 broken contigs
#read in *input_breaks.txt
inputBreaks <- read.table("data/water_buffalo_12May2017_XIYn4.input_breaks.txt",
stringsAsFactors = FALSE)
#base read in zero-based system
colnames(inputBreaks) <- c("HiRise_Scaffold","Input","StartBaseInput","EndBaseInput",
"Strand","StartBaseHiRise","EndBaseHiRise")
#read in *table.txt
table <- read.table("data/water_buffalo_12May2017_XIYn4.table.txt",stringsAsFactors = FALSE)
colnames(table) <- c("HiRise_Scaffold","Input","StartBaseInput","EndBaseInput",
"Strand","StartBaseHiRise","EndBaseHiRise")
input.uniq <- c()
#loop thro inputBreaks to get unique char
#store unique char in a vector
for (i in 1:nrow(inputBreaks)){
input.uniq <- c(input.uniq,inputBreaks[i,2])
}
input.uniq <- unique(input.uniq)
chicStatus_vec <- c()
scaffold_name <- c()
for (k in 1:nrow(table)){
selc <- is.element(table[k,2],input.uniq)
if (selc) chicStatus <- "broken"
else chicStatus <- "unbroken"
chicStatus_vec <- c(chicStatus_vec,chicStatus)
#split scaffold name to be appended to a vector
split_name <- strsplit(table[k,1],";")[[1]][1]
scaffold_name <- c(scaffold_name,split_name)
}
chicStatus_vec <- as.character(chicStatus_vec)
scaffold_name <- as.character(scaffold_name)
table.new <- cbind(table,chicStatus_vec,scaffold_name,stringsAsFactors = FALSE)
table.scaffoldName.break <- table(table.new$scaffold_name,table.new$chicStatus_vec)
table.scaffoldName.break <- as.data.frame.matrix(table.scaffoldName.break)
joinStatus <- c()
for (l in 1:nrow(table.scaffoldName.break)){
if (table.scaffoldName.break[l,1] == 0 && table.scaffoldName.break[l,2] == 1) {
status_vec <- "single_unbroken"
} else if (table.scaffoldName.break[l,1] == 1 && table.scaffoldName.break[l,2] == 0){
status_vec <- "single_broken"
} else if (table.scaffoldName.break[l,1] > 1 && table.scaffoldName.break[l,2] == 0){
status_vec <- "joined_broken_only"
} else if (table.scaffoldName.break[l,1] == 0 && table.scaffoldName.break[l,2] > 1){
status_vec <- "joined_unbroken_only"
} else if (table.scaffoldName.break[l,1] >= 1 && table.scaffoldName.break[l,2] >= 1){
status_vec <- "joined_both"
}
joinStatus <- c(joinStatus,status_vec)
}
table.scaffoldName.break.join <- cbind(table.scaffoldName.break,joinStatus,stringsAsFactors = FALSE)
library(dplyr)
table.scaffoldName.break.join  <- tbl_df(table.scaffoldName.break.join )
table.join <- table.scaffoldName.break.join %>% filter(joinStatus == "joined_both")
scaffold_name2 <- rownames(table.scaffoldName.break.join)
table.scaffoldName.break.join$scaffold_name <- scaffold_name2
#put the joinstatus to table.new
status2 <- c()
for (m in 1:nrow(table.new)){
vec <- which(table.scaffoldName.break.join$scaffold_name == table.new$scaffold_name[m])
joinStatus2 <- table.scaffoldName.break.join$joinStatus[vec]
status2 <- c(status2,joinStatus2)
}
table.new$status2 <- status2
table.new.joined_unbroken_only <- table.new[table.new$status2 == "joined_unbroken_only",]
table.new.single_unbroken <- table.new[table.new$status2 == "single_unbroken",]
table.new.single_broken <- table.new[table.new$status2 == "single_broken",]
table.new.joined_broken_only <- table.new[table.new$status2 == "joined_broken_only",]
table.new.joined_both <- table.new[table.new$status2 == "joined_both",]
#Output the 1061 fragments that have been labeled on their break and join status
#however, whether the break is to be trusted is not decided.
rm(list=ls())
#read in *input_breaks.txt
inputBreaks <- read.table("data/water_buffalo_12May2017_XIYn4.input_breaks.txt",
stringsAsFactors = FALSE)
#base read in zero-based system
colnames(inputBreaks) <- c("HiRise_Scaffold","Input","StartBaseInput","EndBaseInput",
"Strand","StartBaseHiRise","EndBaseHiRise")
#read in *table.txt
table <- read.table("data/water_buffalo_12May2017_XIYn4.table.txt",stringsAsFactors = FALSE)
colnames(table) <- c("HiRise_Scaffold","Input","StartBaseInput","EndBaseInput",
"Strand","StartBaseHiRise","EndBaseHiRise")
input.uniq <- c()
#loop thro inputBreaks to get unique char
#store unique char in a vector
for (i in 1:nrow(inputBreaks)){
input.uniq <- c(input.uniq,inputBreaks[i,2])
}
input.uniq <- unique(input.uniq)
chicStatus_vec <- c()
scaffold_name <- c()
for (k in 1:nrow(table)){
selc <- is.element(table[k,2],input.uniq)
if (selc) chicStatus <- "broken"
else chicStatus <- "unbroken"
chicStatus_vec <- c(chicStatus_vec,chicStatus)
#split scaffold name to be appended to a vector
split_name <- strsplit(table[k,1],";")[[1]][1]
scaffold_name <- c(scaffold_name,split_name)
}
chicStatus_vec <- as.character(chicStatus_vec)
scaffold_name <- as.character(scaffold_name)
table.new <- cbind(table,chicStatus_vec,scaffold_name,stringsAsFactors = FALSE)
table.scaffoldName.break <- table(table.new$scaffold_name,table.new$chicStatus_vec)
table.scaffoldName.break <- as.data.frame.matrix(table.scaffoldName.break)
joinStatus <- c()
for (l in 1:nrow(table.scaffoldName.break)){
if (table.scaffoldName.break[l,1] == 0 && table.scaffoldName.break[l,2] == 1) {
status_vec <- "single_unbroken"
} else if (table.scaffoldName.break[l,1] == 1 && table.scaffoldName.break[l,2] == 0){
status_vec <- "single_broken"
} else if (table.scaffoldName.break[l,1] > 1 && table.scaffoldName.break[l,2] == 0){
status_vec <- "joined_broken_only"
} else if (table.scaffoldName.break[l,1] == 0 && table.scaffoldName.break[l,2] > 1){
status_vec <- "joined_unbroken_only"
} else if (table.scaffoldName.break[l,1] >= 1 && table.scaffoldName.break[l,2] >= 1){
status_vec <- "joined_both"
}
joinStatus <- c(joinStatus,status_vec)
}
table.scaffoldName.break.join <- cbind(table.scaffoldName.break,joinStatus,stringsAsFactors = FALSE)
library(dplyr)
table.scaffoldName.break.join  <- tbl_df(table.scaffoldName.break.join )
table.join <- table.scaffoldName.break.join %>% filter(joinStatus == "joined_both")
scaffold_name2 <- rownames(table.scaffoldName.break.join)
table.scaffoldName.break.join$scaffold_name <- scaffold_name2
#put the joinstatus to table.new
status2 <- c()
for (m in 1:nrow(table.new)){
vec <- which(table.scaffoldName.break.join$scaffold_name == table.new$scaffold_name[m])
joinStatus2 <- table.scaffoldName.break.join$joinStatus[vec]
status2 <- c(status2,joinStatus2)
}
table.new$status2 <- status2
table.new.joined_unbroken_only <- table.new[table.new$status2 == "joined_unbroken_only",]
table.new.single_unbroken <- table.new[table.new$status2 == "single_unbroken",]
table.new.single_broken <- table.new[table.new$status2 == "single_broken",]
table.new.joined_broken_only <- table.new[table.new$status2 == "joined_broken_only",]
table.new.joined_both <- table.new[table.new$status2 == "joined_both",]
View(inputBreaks)
View(table.join)
View(table.new)
inputBreaks <- read.table("data/water_buffalo_12May2017_XIYn4.input_breaks.txt",stringsAsFactors = FALSE)
#base read in zero-based system
colnames(inputBreaks) <- c("HiRise_Scaffold","Input","StartBaseInput","EndBaseInput",
"Strand","StartBaseHiRise","EndBaseHiRise")
input.uniq <- c()
#loop thro inputBreaks to get unique char
#store unique char in a vector
for (i in 1:nrow(inputBreaks)){
input.uniq <- c(input.uniq,inputBreaks[i,2])
}
input.uniq <- unique(input.uniq)
#loop thro each row in inputbreaks, if Input that matches unique char, extract StartBaseInput and EndBaseInput
#push them into an empty vector, find duplicate number, only use duplicate number and store it
#based on how many duplicated numbers (for loop on duplicated number vector),
#output Input and duplicated number as a row to an empty DF
library(dplyr)
inputBreaks <- tbl_df(inputBreaks)
# for (k in 1:length(input.uniq)){
#   char1 <- input.uniq[k]
#   df1 <- filter(inputBreaks,Input == char1)
#   vec <- as.integer()
#   for (l in 1:nrow(df1)){
#     vec[l] <- df1[l,3]
#     vec[l + 1] <- df1[l,4]
#     # vec1 <- df1[l,3]
#     # vec1 <- as.integer(vec1)
#     # vec2 <- df1[l,4]
#     # vec2 <- as.integer(vec2)
#     # vec <- c(vec1,vec2)
#   }
# }
DF <- data.frame(a = character(),b = integer(), c = integer())
inputBreaks.ref <- inputBreaks[,2:4]
for (m in 1:nrow(inputBreaks.ref)){
if (m == 1) {
RefName <- inputBreaks.ref$Input[1]
RefEndpt <- inputBreaks.ref$EndBaseInput[1]
DF <- rbind(DF,inputBreaks.ref[1,])
next()
}
if (m == nrow(inputBreaks.ref)) next()
else {
currentRowRefName <- inputBreaks.ref$Input[m]
nextRowRefName <- inputBreaks.ref$Input[m+1]
if (currentRowRefName == RefName && currentRowRefName != nextRowRefName) next()
if (currentRowRefName != RefName && currentRowRefName == nextRowRefName) {
RefName <- inputBreaks.ref$Input[m]
DF <- rbind(DF,inputBreaks.ref[m,])
}else {
RefName <- inputBreaks.ref$Input[m]
DF <- rbind(DF,inputBreaks.ref[m,])
}
}
}
difference <- inputBreaks$EndBaseInput - inputBreaks$StartBaseInput
min(difference)
DF <- DF[,c(1,3)]
DF$breakptleft25k <- DF$EndBaseInput - 25000
DF$breakptright25k <- DF$EndBaseInput + 25000
View(DF)
View(DF)
View(DF)
?expression
?plot
p <- ggplot(mpg, aes(displ, cty)) + geom_point()
library(ggplot2)
p <- ggplot(mpg, aes(displ, cty)) + geom_point()
p
mpg
p + facet_grid(vars(drv))
p <- ggplot(mpg, aes(displ, cty)) + geom_point()
p + facet_grid(vars(drv))
?vars
?facet_grid
p <- ggplot(mpg, aes(displ, cty)) + geom_point()
library(dplyr)
p <- ggplot(mpg, aes(displ, cty)) + geom_point()
p + facet_grid(dplyr::vars(drv))
p
p + facet_grid(vars(drv))
p + facet_grid(cols = vars(cyl))
p <- ggplot(mpg, aes(displ, cty)) + geom_point()
p + facet_grid(cols = vars(cyl))
p
?facet_grid
p <- ggplot(mpg, aes(displ, cty)) + geom_point()
p + facet_grid(. ~ cyl)
p
p + facet_grid(. ~ cyl)
mpg
p + facet_grid(drv ~ .)
x <- seq(0, 4 * pi, 0.1)
n <- length(x)
y1 <- 0.5 * runif(n) + sin(x)
y2 <- 0.5 * runif(n) + cos(x) - sin(x)
plot(x, y1, col = "blue", pch = 20)
points(x, y2, col = "red", pch = 20)
df <- data.frame(x, y1, y2)
ggplot(df, aes(x, y = value, color = variable)) +
geom_point(aes(y = y1, col = "y1")) +
geom_point(aes(y = y2, col = "y2"))
library(reshape)
# This creates a new data frame with columns x, variable and value
# x is the id, variable holds each of our timeseries designation
df.melted <- melt(df, id = "x")
ggplot(data = df.melted, aes(x = x, y = value, color = variable)) +
geom_point()
ggplot(data = df.melted, aes(x = x, y = value)) +
geom_point() + facet_grid(variable ~ .)
p <- ggplot(mpg, aes(displ, cty)) + geom_point()
p
dir()
dir
dir()
library(dplyr,quietly = TRUE)
library(ggplot2,quietly = TRUE)
#read in PacBio cov file
pacbio_cov <- read.delim("figure_maintext/000001F_arrow_arrow_48830932_48880932.cov",header = FALSE,
stringsAsFactors = FALSE)
#read in PacBio cov file
pacbio_cov <- read.delim("/figure_maintext/000001F_arrow_arrow_48830932_48880932.cov",header = FALSE,
stringsAsFactors = FALSE)
#read in PacBio cov file
pacbio_cov <- read.delim("./figure_maintext/000001F_arrow_arrow_48830932_48880932.cov",header = FALSE,
stringsAsFactors = FALSE)
dir()
#read in PacBio cov file
pacbio_cov <- read.delim("CovInChicBreak/figure_maintext/000001F_arrow_arrow_48830932_48880932.cov",header = FALSE,
stringsAsFactors = FALSE)
rm(list=ls(0))
rm(list=ls())
#read in PacBio cov file
pacbio_cov <- read.delim("CovInChicBreak/figure_maintext/000001F_arrow_arrow_48830932_48880932.cov",header = FALSE,
stringsAsFactors = FALSE)
View(pacbio_cov)
colnames(pacbio_cov) <- c("Input","POS","cov")
boolean1 <- which(pacbio_cov$POS >= 48830932 & pacbio_cov$POS <= 48880932)
pacbio_cov_region <- pacbio_cov[boolean1,]
View(pacbio_cov_region)
p <- ggplot(pacbio_cov_region, aes(POS, cov)) + geom_point()
p
p <- ggplot(pacbio_cov_region, aes(POS, cov)) + geom_line()
p
p <- ggplot(pacbio_cov_region, aes(POS, cov)) + geom_line(linetype = "dashed")
p
p <- ggplot(pacbio_cov_region, aes(POS, cov)) + geom_line(linetype = "dotted")
p
View(pacbio_cov_region)
p <- ggplot(pacbio_cov_region, aes(POS, cov)) + geom_line(linetype = "dotted")
p <-  xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p
p <- ggplot(pacbio_cov_region, aes(POS, cov)) + geom_line(linetype = "dotted")
p <-  p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p
pacbio_cov_region$region <- 'diploid'
pacbio_cov_region$region[pacbio_cov_region$region < 48840000] <- 'haploid1'
View(pacbio_cov_region)
sum(pacbio_cov_region$region < 48840000)
pacbio_cov_region$region[pacbio_cov_region$POS < 48840000] <- 'haploid1'
View(pacbio_cov_region)
p <- ggplot(pacbio_cov_region, aes(x=POS, y=cov, group=region))
p <-  p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_line(aes(linetype=region, color=region))
p
pacbio_cov_region$region[pacbio_cov_region$POS > 48865000 & pacbio_cov_region$POS < 48875000] <- 'haplotype 2'
pacbio_cov_region$region <- 'diploid'
pacbio_cov_region$region[pacbio_cov_region$POS < 48840000] <- 'haplotype 1'
pacbio_cov_region$region[pacbio_cov_region$POS > 48865000 & pacbio_cov_region$POS < 48875000] <- 'haplotype 2'
p <- ggplot(pacbio_cov_region, aes(x=POS, y=cov, group=region))
p <-  p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_line(aes(linetype=region, color=region))
p
p <- ggplot(pacbio_cov_region, aes(x=POS, y=cov, group=region))
p <-  p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(linetype=region, color=region))
p
p <- ggplot(pacbio_cov_region, aes(x=POS, y=cov, group=region))
p <-  p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(color=region))
p
p <- ggplot(pacbio_cov_region, aes(x=POS, y=cov, group=region))
p <-  p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(linetype=region, color=region))
p
p <- ggplot(pacbio_cov_region, aes(x=POS, y=cov, group=region))
p <-  p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(shape=region, color=region))
p
p <- ggplot(pacbio_cov_region, aes(x=POS, y=cov, group=region))
p <-  p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(shape=region, color=region))
p <- p + geom_vline(xintercept = 48855932)
p
p <- ggplot(pacbio_cov_region, aes(x=POS, y=cov, group=region))
p <-  p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(shape=region, color=region))
p <- p + geom_vline(xintercept = 48855932,linetype="dotted")
p
pacbio_cov <- read.delim("CovInChicBreak/figure_maintext/000001F_arrow_arrow_48830932_48880932.cov",header = FALSE,
stringsAsFactors = FALSE)
colnames(pacbio_cov) <- c("Input","POS","cov")
boolean1 <- which(pacbio_cov$POS >= 48830932 & pacbio_cov$POS <= 48880932)
pacbio_cov_Region <- pacbio_cov[boolean1,]
pacbio_cov_Region$Region <- 'diploid'
pacbio_cov_Region$Region[pacbio_cov_Region$POS < 48840000] <- 'haplotype 1'
pacbio_cov_Region$Region[pacbio_cov_Region$POS > 48865000 & pacbio_cov_Region$POS < 48875000] <- 'haplotype 2'
p <- ggplot(pacbio_cov_Region, aes(x=POS, y=cov, group=Region))
p <-  p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(shape=Region, color=Region))
p <- p + geom_vline(xintercept = 48855932,linetype="dotted")
p
p <- ggplot(pacbio_cov_Region, aes(x=POS, y=cov, group=Region))
p <-  p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(shape=Region, color=Region))
p <- p + geom_vline(xintercept = 48855932,linetype="dotted",col="navy blue")
p
?annotate
p <- ggplot(pacbio_cov_Region, aes(x=POS, y=cov, group=Region))
p <-  p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(shape=Region, color=Region))
p <- p + geom_vline(xintercept = 48855932,linetype="dotted",col="navy blue")
p <- p + annotate(geom="text", x=48855932, y=65, label="breakpoint",color="black")
p
?annotate
p <- ggplot(pacbio_cov_Region, aes(x=POS, y=cov, group=Region))
p <-  p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(shape=Region, color=Region))
p <- p + geom_vline(xintercept = 48855932,linetype="dotted",col="navy blue")
p <- p + annotate(geom="text", x=48855932+1500, y=65, label="breakpoint",color="black")
p
p <- ggplot(pacbio_cov_Region, aes(x=POS, y=cov, group=Region))
p <-  p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(shape=Region, color=Region))
p <- p + geom_vline(xintercept = 48855932,linetype="dotted",col="navy blue")
p <- p + annotate(geom="text", x=48855932+1800, y=65, label="breakpoint",color="black")
p
p <- ggplot(pacbio_cov_Region, aes(x=POS, y=cov, group=Region))
p <-  p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(shape=Region, color=Region))
p <- p + geom_vline(xintercept = 48855932,linetype="dotted",col="navy blue")
p <- p + annotate(geom="text", x=48855932+2000, y=65, label="breakpoint",color="black")
p
p <- ggplot(pacbio_cov_Region, aes(x=POS, y=cov, group=Region))
p <-  p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(shape=Region, color=Region))
p <- p + geom_vline(xintercept = 48855932,linetype="dotted",col="navy blue")
p <- p + annotate(geom="text", x=48855932+2100, y=65, label="breakpoint",color="black")
p
?annotate
p <- ggplot(pacbio_cov_Region, aes(x=POS, y=cov, group=Region))
p <-  p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(shape=Region, color=Region))
p <- p + geom_vline(xintercept = 48855932,linetype="dotted",col="navy blue")
p <- p + annotate(geom="text", x=48855932+2200, y=65, label="breakpoint",color="black")
p
tiff(filename = figure.name,width = 600, height = 600)
p <- ggplot(pacbio_cov_Region, aes(x=POS, y=cov, group=Region))
p <- p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(shape=Region, color=Region))
p <- p + geom_vline(xintercept = 48855932,linetype="dotted",col="navy blue")
p <- p + annotate(geom="text", x=48855932+2200, y=63, label="breakpoint",color="black")
p
dev.off()
tiff(filename = "PhaseSwitch.tiff",width = 600, height = 600)
p <- ggplot(pacbio_cov_Region, aes(x=POS, y=cov, group=Region))
p <- p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(shape=Region, color=Region))
p <- p + geom_vline(xintercept = 48855932,linetype="dotted",col="navy blue")
p <- p + annotate(geom="text", x=48855932+2200, y=63, label="breakpoint",color="black")
p
dev.off()
tiff(filename = "PhaseSwitch.tiff",width = 600, height = 600)
p <- ggplot(pacbio_cov_Region, aes(x=POS, y=cov, group=Region))
p <- p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(shape=Region, color=Region))
p <- p + geom_vline(xintercept = 48855932,linetype="dotted",col="navy blue")
p <- p + annotate(geom="text", x=48855932+2400, y=63.5, label="breakpoint",color="black")
p
dev.off()
tiff(filename = "PhaseSwitch.tiff",width = 600, height = 600)
p <- ggplot(pacbio_cov_Region, aes(x=POS, y=cov, group=Region))
p <- p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(shape=Region, color=Region))
p <- p + geom_vline(xintercept = 48855932,linetype="dotted",col="navy blue")
p <- p + annotate(geom="text", x=48855932+2550, y=63.5, label="breakpoint",color="black")
p
dev.off()
tiff(filename = "PhaseSwitch.tiff",width = 600, height = 600)
p <- ggplot(pacbio_cov_Region, aes(x=POS, y=cov, group=Region))
p <- p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(shape=Region, color=Region))
p <- p + geom_vline(xintercept = 48855932,linetype="dotted",col="navy blue")
p <- p + annotate(geom="text", x=48855932+2800, y=63.5, label="breakpoint",color="black")
p
dev.off()
tiff(filename = "PhaseSwitch.tiff",width = 600, height = 600)
p <- ggplot(pacbio_cov_Region, aes(x=POS, y=cov, group=Region))
p <- p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(shape=Region, color=Region))
p <- p + geom_vline(xintercept = 48855932,linetype="dotted",col="navy blue")
p <- p + annotate(geom="text", x=48855932+3000, y=63.5, label="breakpoint",color="black")
p
dev.off()
tiff(filename = "PhaseSwitch.tiff",width = 600, height = 600)
p <- ggplot(pacbio_cov_Region, aes(x=POS, y=cov, group=Region))
p <- p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(shape=Region, color=Region))
p <- p + geom_vline(xintercept = 48855932,linetype="dotted",col="navy blue")
p <- p + annotate(geom="text", x=48855932+3200, y=63.5, label="breakpoint",color="black")
p
dev.off()
p <- ggplot(pacbio_cov_Region, aes(x=POS, y=cov, group=Region))
p <- p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(shape=Region, color=Region))
p <- p + geom_vline(xintercept = 48855932,linetype="dotted",col="navy blue")
p <- p + annotate(geom="text", x=48855932+3200, y=63.5, label="breakpoint",color="black")
p
pacbio_cov <- read.delim("CovInChicBreak/figure_maintext/000001F_arrow_arrow_48830932_48880932.cov",header = FALSE,
stringsAsFactors = FALSE)
colnames(pacbio_cov) <- c("Input","POS","cov")
boolean1 <- which(pacbio_cov$POS >= 48830932 & pacbio_cov$POS <= 48880932)
pacbio_cov_Region <- pacbio_cov[boolean1,]
pacbio_cov_Region$Region <- 'diploid'
pacbio_cov_Region$Region[pacbio_cov_Region$POS < 48845000] <- 'haplotype 1'
pacbio_cov_Region$Region[pacbio_cov_Region$POS > 48865000 & pacbio_cov_Region$POS < 48875000] <- 'haplotype 2'
p <- ggplot(pacbio_cov_Region, aes(x=POS, y=cov, group=Region))
p <- p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(shape=Region, color=Region))
p <- p + geom_vline(xintercept = 48855932,linetype="dotted",col="navy blue")
p <- p + annotate(geom="text", x=48855932+3200, y=63.5, label="breakpoint",color="black")
p
tiff(filename = "PhaseSwitch.tiff",width = 600, height = 600)
p <- ggplot(pacbio_cov_Region, aes(x=POS, y=cov, group=Region))
p <- p + xlab("Position in contig") + ylab("Coverage of mapped PacBio subreads")
p <- p + geom_point(aes(shape=Region, color=Region))
p <- p + geom_vline(xintercept = 48855932,linetype="dotted",col="navy blue")
p <- p + annotate(geom="text", x=48855932+3200, y=63.5, label="breakpoint",color="black")
p
dev.off()
pacbio_cov_region$cov
veryHighCov <- sum(pacbio_cov_region$cov >= 90)
